1.正则表达式compile对象属性变量
2.正则表达式match对象属性和函数
3.git使用
    什么是代码管理工具?
    什么是git?
    git的基本命令操作

*******************************************************************
版本控制命令
    1.回到之前的commit id位置
    git reset --hard  HEAD^
    *　HEAD后有几个尖号^ 就表示退回几个commit位置

    get reset --hard commit_id
    *　commit_id用前七位即可
    *　选定commit_id表示HEAD指向选定的id而不是恢复到指定的commit_id版本

    2.去往之前较新的版本
    git reflog 查看历史版本记录
    *查看后使用get reset --hard 即可选择回到某个操作之后的状态

标签管理
    什么是标签：即在某个commit_id位置添加快照，保存工作状态，
    一般用于版本的迭代和重要项目节点记录
    1.创建新的标签
        git tag v1.0
        * 默认在最新的commit_id处添加标签
        git tag v1.0 [commit_id]
        * 可以指定一个commit_id版本

        git tag v1.0 -m 'message'
        * 为标签添加信息

    2.查看标签
        git tag  列出当前标签
        git show v1.0  显示标签具体信息

    3.去往某个标签版本
        git reset --hard v1.0

    4.删除标签
    git tag -d v1.0

临时工作区操作
    1.创建工作区
        git stash
        * 对工作区文件的修改进行保存
    2.查看已经保存的工作区记录
        git stash list
        * 最新的保存为{0}依次类推
    3.选择应用某个工作区
        git stash apply  stash@{0}
        * 执行该命令时，工作区必须为'干净'状态
    4.删除保存的工作区
        git stash drop stash@{0}  删除某一个
        git stash pop   恢复最新保存的工作区并将其删除
        git stash clear　删除所有工作区
分支操作
    什么是分支：即每个人获取原有代码，再此基础上创建自己的工作环境
    单独开发，不会影响其他分支工作.开发完成后在统一合并

    1.查看当前工作分支
        git branch  列出所有项目分支，*　表示当前工作分支

    2.分支创建和切换
        git branch　[branch_name]
        
        切换分支：
        git checkout [branch_name]
        * 创建新的分支时最好确保当前分支是'干净的'

        创建并切换分支：
        git checkout -b [branch_name]
        *创建新的分支并切换
    3.合并分支
        git merge [branch_name]
        *　在master主分支执行该命令，即将其他分支内容合并到master
        *  当合并分支产生冲突时，需要手动更改提交
    
    4.删除分支
        git branch -d [branch_name]
        * 如果分支没有被合并　需要用 -D 强制删除

    帮助文档
        git helf [命令名称]
    
远程仓库
    即远程主机上的git仓库。实际git为分布式结构，每台主机git仓库都相似，
    只是把其他主机中的git仓库称为远程仓库
    1.创建共享远程仓库
        [1] 创建仓库目录，设置目录属主
            mkdir gitrepo
            chown tarena:tarena gitrepo
        [2] 将仓库目录使用　--bare 初始化，给仓库起名称
            cd gitrepo
            git init --bare spyder.git
        [3] 设置spyder.git目录属主与项目目录相同
            chown -R tarena:tarena spyder.git
    2.远程仓库连接协议
        * 本地协议　　
            直接通过路径连接一个项目仓库
            e.g. /opt/git/project
                file:///opt/git/project.git
        * SSH 协议
            通过ssh协议方式连接远程
            e.g. ssh://user@server/project.git(项目路径)
                user@server:/project.git (项目路径)
        * git 协议
        * HTTP/HTTPS协议  
            e.g. http://example.com/project.git
        
        sudo apt-get install ssh   安装ssh
    3.添加远程主机仓库
        git remote add origin tarena@127.0.0.1:/home/tarena/gitrepo/spyder.git
        * 该命令必须在某个git项目目录下运行

        删除远程主机：git remote rm [远程主机名]

    4.push将本地分支推送到远程
        将本地的master分支推送到远程
        git push -u origin master

        * -u表示本地master和远程master建立追踪关系
        这样后面本地分支修改后再向远程推送则可以省略分支名

        向远程推送标签
        git push origin v1.0  某一个标签
        git push origin --tags  所有标签

        删除远程分支
        git push origin --delete Tom_dev

    5.clone 远程仓库项目
        git clone tarena@127.0.0.1:/home/tarena/gitrepo/spyder.git














